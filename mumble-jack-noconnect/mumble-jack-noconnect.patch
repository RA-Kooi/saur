diff -Naur orig/mumble-1.2.19/src/mumble/JackAudio.cpp mumble-1.2.19/src/mumble/JackAudio.cpp
--- orig/mumble-1.2.19/src/mumble/JackAudio.cpp	1969-12-31 16:00:00.000000000 -0800
+++ mumble-1.2.19/src/mumble/JackAudio.cpp	2017-04-07 00:20:25.365337513 -0700
@@ -0,0 +1,293 @@
+/* Copyright (C) 2011, Benjamin Jemlich <pcgod@users.sourceforge.net>
+   Copyright (C) 2011, Filipe Coelho <falktx@gmail.com>
+
+   All rights reserved.
+
+   Redistribution and use in source and binary forms, with or without
+   modification, are permitted provided that the following conditions
+   are met:
+
+   - Redistributions of source code must retain the above copyright notice,
+     this list of conditions and the following disclaimer.
+   - Redistributions in binary form must reproduce the above copyright notice,
+     this list of conditions and the following disclaimer in the documentation
+     and/or other materials provided with the distribution.
+   - Neither the name of the Mumble Developers nor the names of its
+     contributors may be used to endorse or promote products derived from this
+     software without specific prior written permission.
+
+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR
+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+
+#include "JackAudio.h"
+#include "User.h"
+#include "Global.h"
+#include "MainWindow.h"
+#include "Timer.h"
+
+#include <cstring>
+
+static JackAudioSystem *jasys = NULL;
+
+class JackAudioInputRegistrar : public AudioInputRegistrar {
+        public:
+                JackAudioInputRegistrar();
+                virtual AudioInput *create();
+                virtual const QList<audioDevice> getDeviceChoices();
+                virtual void setDeviceChoice(const QVariant &, Settings &);
+                virtual bool canEcho(const QString &) const;
+};
+
+class JackAudioOutputRegistrar : public AudioOutputRegistrar {
+        public:
+                JackAudioOutputRegistrar();
+                virtual AudioOutput *create();
+                virtual const QList<audioDevice> getDeviceChoices();
+                virtual void setDeviceChoice(const QVariant &, Settings &);
+};
+
+class JackAudioInit : public DeferInit {
+        public:
+                JackAudioInputRegistrar *airJackAudio;
+                JackAudioOutputRegistrar *aorJackAudio;
+                void initialize() {
+                        jasys = new JackAudioSystem();
+                        jasys->init_jack();
+                        jasys->qmWait.lock();
+                        jasys->qwcWait.wait(&jasys->qmWait, 1000);
+                        jasys->qmWait.unlock();
+                        if (jasys->bJackIsGood) {
+                                airJackAudio = new JackAudioInputRegistrar();
+                                aorJackAudio = new JackAudioOutputRegistrar();
+                        } else {
+                                airJackAudio = NULL;
+                                aorJackAudio = NULL;
+                                delete jasys;
+                                jasys = NULL;
+                        }
+                };
+                void destroy() {
+                        if (airJackAudio)
+                                delete airJackAudio;
+                        if (aorJackAudio)
+                                delete aorJackAudio;
+                        if (jasys) {
+                                jasys->close_jack();
+                                delete jasys;
+                                jasys = NULL;
+                        }
+                };
+};
+
+static JackAudioInit jackinit; //unused
+
+JackAudioSystem::JackAudioSystem() {
+        bJackIsGood = false;
+        iSampleRate = 0;
+}
+
+JackAudioSystem::~JackAudioSystem() {
+}
+
+void JackAudioSystem::init_jack()
+{
+        client = jack_client_open("mumble", JackNullOption, 0);
+
+        if (client) {
+                in_port = jack_port_register(client, "input", JACK_DEFAULT_AUDIO_TYPE, JackPortIsInput, 0);
+                out_port = jack_port_register(client, "output", JACK_DEFAULT_AUDIO_TYPE, JackPortIsOutput, 0);
+                jack_set_process_callback(client, process_callback, this);
+                jack_set_sample_rate_callback(client, srate_callback, this);
+                jack_on_shutdown(client, shutdown_callback, this);
+
+                iSampleRate = jack_get_sample_rate(client);
+
+                if (jack_activate(client) || in_port == NULL || out_port == NULL) {
+                    client = NULL;
+                    return;
+                }
+
+                // If we made it this far, then everything is okay
+                qhInput.insert(QString(), tr("Hardware Ports"));
+                qhOutput.insert(QString(), tr("Hardware Ports"));
+                bJackIsGood = true;
+
+            } else {
+                bJackIsGood = false;
+                client = NULL;
+            }
+}
+
+void JackAudioSystem::close_jack()
+{
+        if (client) {
+                jack_deactivate(client);
+                jack_client_close(client);
+                client = NULL;
+        }
+}
+
+int JackAudioSystem::process_callback(jack_nframes_t nframes, void *arg)
+{
+        JackAudioSystem *jas = (JackAudioSystem*)arg;
+
+        if (jas && jas->bJackIsGood) {
+                AudioInputPtr ai = g.ai;
+                AudioOutputPtr ao = g.ao;
+                JackAudioInput *jai = (JackAudioInput*)(ai.get());
+                JackAudioOutput *jao = (JackAudioOutput*)(ao.get());
+
+                if (jai && jai->bRunning && jai->iMicChannels > 0 && !jai->isFinished()) {
+                        void* input = jack_port_get_buffer(jas->in_port, nframes);
+                        if ((float*)input != 0)
+                            jai->addMic(input, nframes);
+                }
+
+                if (jao && jao->bRunning && jao->iChannels > 0 && !jao->isFinished()) {
+                        jack_default_audio_sample_t* output = (jack_default_audio_sample_t*)jack_port_get_buffer(jas->out_port, nframes);
+                        memset(output, 0, sizeof(jack_default_audio_sample_t)*nframes); //TEST
+                        jao->mix(output, nframes);
+                }
+        }
+
+        return 0;
+}
+
+int JackAudioSystem::srate_callback(jack_nframes_t frames, void *arg)
+{
+        JackAudioSystem *jas = (JackAudioSystem*)arg;
+        jas->iSampleRate = frames;
+        return 0;
+}
+
+void JackAudioSystem::shutdown_callback(void *arg)
+{
+        JackAudioSystem *jas = (JackAudioSystem*)arg;
+        jas->bJackIsGood = false;
+}
+
+JackAudioInputRegistrar::JackAudioInputRegistrar() : AudioInputRegistrar(QLatin1String("JACK"), 10) {
+}
+
+AudioInput *JackAudioInputRegistrar::create() {
+        return new JackAudioInput();
+}
+
+const QList<audioDevice> JackAudioInputRegistrar::getDeviceChoices() {
+        QList<audioDevice> qlReturn;
+
+        QStringList qlInputDevs = jasys->qhInput.keys();
+        qSort(qlInputDevs);
+
+        foreach(const QString &dev, qlInputDevs) {
+                qlReturn << audioDevice(jasys->qhInput.value(dev), dev);
+        }
+
+        return qlReturn;
+}
+
+void JackAudioInputRegistrar::setDeviceChoice(const QVariant &choice, Settings &s) {
+        Q_UNUSED(choice);
+        Q_UNUSED(s);
+}
+
+bool JackAudioInputRegistrar::canEcho(const QString &osys) const {
+        Q_UNUSED(osys);
+        return false;
+}
+
+JackAudioOutputRegistrar::JackAudioOutputRegistrar() : AudioOutputRegistrar(QLatin1String("JACK"), 10) {
+}
+
+AudioOutput *JackAudioOutputRegistrar::create() {
+        return new JackAudioOutput();
+}
+
+const QList<audioDevice> JackAudioOutputRegistrar::getDeviceChoices() {
+        QList<audioDevice> qlReturn;
+
+        QStringList qlOutputDevs = jasys->qhOutput.keys();
+        qSort(qlOutputDevs);
+
+        foreach(const QString &dev, qlOutputDevs) {
+                qlReturn << audioDevice(jasys->qhOutput.value(dev), dev);
+        }
+
+        return qlReturn;
+}
+
+void JackAudioOutputRegistrar::setDeviceChoice(const QVariant &choice, Settings &s) {
+        Q_UNUSED(choice);
+        Q_UNUSED(s);
+}
+
+JackAudioInput::JackAudioInput() {
+        bRunning = true;
+        iMicChannels = 0;
+};
+
+JackAudioInput::~JackAudioInput() {
+        bRunning = false;
+        iMicChannels = 0;
+        qmMutex.lock();
+        qwcWait.wakeAll();
+        qmMutex.unlock();
+        wait();
+}
+
+void JackAudioInput::run() {
+        if (jasys && jasys->bJackIsGood) {
+            iMicFreq = jasys->iSampleRate;
+            iMicChannels = 1;
+            eMicFormat = SampleFloat;
+            initializeMixer();
+        }
+
+        qmMutex.lock();
+        while (bRunning)
+                qwcWait.wait(&qmMutex);
+        qmMutex.unlock();
+}
+
+JackAudioOutput::JackAudioOutput() {
+        bRunning = true;
+        iChannels = 0;
+}
+
+JackAudioOutput::~JackAudioOutput() {
+        bRunning = false;
+        iChannels = 0;
+        qmMutex.lock();
+        qwcWait.wakeAll();
+        qmMutex.unlock();
+        wait();
+}
+
+void JackAudioOutput::run() {
+        if (jasys && jasys->bJackIsGood) {
+            unsigned int chanmasks[32];
+
+            chanmasks[0] = SPEAKER_FRONT_LEFT;
+            chanmasks[1] = SPEAKER_FRONT_RIGHT;
+
+            eSampleFormat = SampleFloat;
+            iMixerFreq = jasys->iSampleRate;
+            iChannels = 1;
+            initializeMixer(chanmasks);
+        }
+
+        qmMutex.lock();
+        while (bRunning)
+                qwcWait.wait(&qmMutex);
+        qmMutex.unlock();
+}
diff -Naur orig/mumble-1.2.19/src/mumble/JackAudio.h mumble-1.2.19/src/mumble/JackAudio.h
--- orig/mumble-1.2.19/src/mumble/JackAudio.h	1969-12-31 16:00:00.000000000 -0800
+++ mumble-1.2.19/src/mumble/JackAudio.h	2017-04-07 00:19:51.479555812 -0700
@@ -0,0 +1,97 @@
+/* Copyright (C) 2011, Benjamin Jemlich <pcgod@users.sourceforge.net>
+   Copyright (C) 2011, Filipe Coelho <falktx@gmail.com>
+
+   All rights reserved.
+
+   Redistribution and use in source and binary forms, with or without
+   modification, are permitted provided that the following conditions
+   are met:
+
+   - Redistributions of source code must retain the above copyright notice,
+     this list of conditions and the following disclaimer.
+   - Redistributions in binary form must reproduce the above copyright notice,
+     this list of conditions and the following disclaimer in the documentation
+     and/or other materials provided with the distribution.
+   - Neither the name of the Mumble Developers nor the names of its
+     contributors may be used to endorse or promote products derived from this
+     software without specific prior written permission.
+
+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR
+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+
+#ifndef _JACKAUDIO_H
+#define _JACKAUDIO_H
+
+#include "AudioInput.h"
+#include "AudioOutput.h"
+#include <jack/jack.h>
+
+class JackAudioOutput;
+class JackAudioInput;
+
+class JackAudioSystem : public QObject {
+        private:
+                Q_OBJECT
+                Q_DISABLE_COPY(JackAudioSystem)
+        protected:
+                jack_client_t* client;
+                jack_port_t* in_port;
+                jack_port_t* out_port;
+
+                static int process_callback(jack_nframes_t nframes, void *arg);
+                static int srate_callback(jack_nframes_t frames, void *arg);
+                static void shutdown_callback(void *arg);
+        public:
+                QHash<QString, QString> qhInput;
+                QHash<QString, QString> qhOutput;
+                bool bJackIsGood;
+                int iSampleRate;
+                QMutex qmWait;
+                QWaitCondition qwcWait;
+
+                void init_jack();
+                void close_jack();
+
+                JackAudioSystem();
+                ~JackAudioSystem();
+};
+
+class JackAudioInput : public AudioInput {
+                friend class JackAudioSystem;
+        private:
+                Q_OBJECT
+                Q_DISABLE_COPY(JackAudioInput)
+        protected:
+                QMutex qmMutex;
+                QWaitCondition qwcWait;
+        public:
+                JackAudioInput();
+                ~JackAudioInput();
+                void run();
+};
+
+class JackAudioOutput : public AudioOutput {
+                friend class JackAudioSystem;
+        private:
+                Q_OBJECT
+                Q_DISABLE_COPY(JackAudioOutput)
+        protected:
+                QMutex qmMutex;
+                QWaitCondition qwcWait;
+        public:
+                JackAudioOutput();
+                ~JackAudioOutput();
+                void run();
+};
+
+#endif
diff -Naur orig/mumble-1.2.19/src/mumble/mumble.pro mumble-1.2.19/src/mumble/mumble.pro
--- orig/mumble-1.2.19/src/mumble/mumble.pro	2017-01-26 22:48:33.000000000 -0800
+++ mumble-1.2.19/src/mumble/mumble.pro	2017-04-07 00:19:51.479555812 -0700
@@ -155,11 +155,17 @@
 unix {
   HAVE_PULSEAUDIO=$$system(pkg-config --modversion --silence-errors libpulse)
   HAVE_PORTAUDIO=$$system(pkg-config --modversion --silence-errors portaudio-2.0)
+  HAVE_JACKAUDIO=$$system(pkg-config --modversion --silence-errors jack)
 
   !isEmpty(HAVE_PORTAUDIO):!CONFIG(no-portaudio) {
     CONFIG *= portaudio
   }
 
+  !isEmpty(HAVE_JACKAUDIO):!CONFIG(no-jackaudio) {
+    CONFIG -= portaudio
+    CONFIG *= jackaudio
+  }
+
   !isEmpty(HAVE_PULSEAUDIO):!CONFIG(no-pulseaudio) {
     CONFIG -= portaudio
     CONFIG *= pulseaudio
@@ -172,6 +178,13 @@
     QMAKE_CXXFLAGS_DEBUG *= -I../../speex/include -I../../speexbuild
   }
 
+  jackaudio {
+        DEFINES *= USE_JACKAUDIO
+        PKGCONFIG *= jack
+        HEADERS *= JackAudio.h
+        SOURCES *= JackAudio.cpp
+  }
+
   CONFIG *= link_pkgconfig
 
   PKGCONFIG *= openssl sndfile
diff -Naur orig/mumble-1.2.19/src/mumble/mumble.pro.orig mumble-1.2.19/src/mumble/mumble.pro.orig
--- orig/mumble-1.2.19/src/mumble/mumble.pro.orig	1969-12-31 16:00:00.000000000 -0800
+++ mumble-1.2.19/src/mumble/mumble.pro.orig	2017-01-26 22:48:33.000000000 -0800
@@ -0,0 +1,382 @@
+include(../mumble.pri)
+
+DEFINES		*= MUMBLE
+TEMPLATE	= app
+QT		*= network sql xml svg
+TARGET		= mumble
+HEADERS		*= BanEditor.h ACLEditor.h ConfigWidget.h Log.h AudioConfigDialog.h AudioStats.h AudioInput.h AudioOutput.h AudioOutputSample.h AudioOutputSpeech.h AudioOutputUser.h CELTCodec.h CustomElements.h MainWindow.h ServerHandler.h About.h ConnectDialog.h GlobalShortcut.h TextToSpeech.h Settings.h Database.h VersionCheck.h Global.h UserModel.h Audio.h ConfigDialog.h Plugins.h PTTButtonWidget.h LookConfig.h Overlay.h OverlayText.h SharedMemory.h AudioWizard.h ViewCert.h TextMessage.h NetworkConfig.h LCD.h Usage.h Cert.h ClientUser.h UserEdit.h Tokens.h UserView.h RichTextEditor.h UserInformation.h FileEngine.h SocketRPC.h VoiceRecorder.h VoiceRecorderDialog.h WebFetch.h ../SignalCurry.h
+SOURCES		*= BanEditor.cpp ACLEditor.cpp ConfigWidget.cpp Log.cpp AudioConfigDialog.cpp AudioStats.cpp AudioInput.cpp AudioOutput.cpp AudioOutputSample.cpp AudioOutputSpeech.cpp AudioOutputUser.cpp main.cpp CELTCodec.cpp CustomElements.cpp MainWindow.cpp ServerHandler.cpp About.cpp ConnectDialog.cpp Settings.cpp Database.cpp VersionCheck.cpp Global.cpp UserModel.cpp Audio.cpp ConfigDialog.cpp Plugins.cpp PTTButtonWidget.cpp LookConfig.cpp OverlayClient.cpp OverlayConfig.cpp OverlayEditor.cpp OverlayEditorScene.cpp OverlayUser.cpp OverlayUserGroup.cpp Overlay.cpp OverlayText.cpp SharedMemory.cpp AudioWizard.cpp ViewCert.cpp Messages.cpp TextMessage.cpp GlobalShortcut.cpp NetworkConfig.cpp LCD.cpp Usage.cpp Cert.cpp ClientUser.cpp UserEdit.cpp Tokens.cpp UserView.cpp RichTextEditor.cpp UserInformation.cpp FileEngine.cpp SocketRPC.cpp VoiceRecorder.cpp VoiceRecorderDialog.cpp WebFetch.cpp
+SOURCES *= smallft.cpp
+DIST		*= ../../icons/mumble.ico licenses.h smallft.h ../../icons/mumble.xpm murmur_pch.h mumble.plist
+RESOURCES	*= mumble.qrc mumble_flags.qrc
+FORMS	*= ConfigDialog.ui MainWindow.ui ConnectDialog.ui ConnectDialogEdit.ui BanEditor.ui ACLEditor.ui Plugins.ui PTTButtonWidget.ui Overlay.ui OverlayEditor.ui LookConfig.ui AudioInput.ui AudioOutput.ui Log.ui TextMessage.ui AudioStats.ui NetworkConfig.ui LCD.ui GlobalShortcut.ui GlobalShortcutTarget.ui Cert.ui UserEdit.ui AudioWizard.ui Tokens.ui RichTextEditor.ui RichTextEditorLink.ui UserInformation.ui VoiceRecorderDialog.ui
+TRANSLATIONS	= mumble_cs.ts mumble_da.ts mumble_de.ts mumble_en.ts mumble_es.ts mumble_fr.ts mumble_it.ts mumble_ja.ts mumble_pl.ts mumble_pt_BR.ts mumble_ru.ts mumble_sv.ts mumble_tr.ts mumble_zh_CN.ts mumble_zh_TW.ts
+
+PRECOMPILED_HEADER = mumble_pch.hpp
+INCLUDEPATH *= ../bonjour
+
+CONFIG(static) {
+  # Ensure that static Mumble.app on Mac OS X
+  # includes and exports its Qt symbols to plugins.
+  #
+  # Some plugins (libmanual) already make use of Qt
+  # functionality, and it's not inconceivable that some
+  # Mumble features will be split into plugins in the
+  # future.
+  macx {
+    QMAKE_LFLAGS -= -Wl,-dead_strip
+    QMAKE_LFLAGS += -Wl,-all_load
+  }
+}
+
+isEmpty(QMAKE_LRELEASE) {
+  QMAKE_QMAKE_BASE = $$basename(QMAKE_QMAKE)
+  QMAKE_LRELEASE = $$dirname(QMAKE_QMAKE)/$$replace(QMAKE_QMAKE_BASE,qmake,lrelease)
+}
+
+unix:!CONFIG(bundled-speex):system(pkg-config --atleast-version=1.2 speexdsp) {
+  CONFIG	*= no-bundled-speex
+}
+
+CONFIG(no-crash-report) {
+  DEFINES	*= NO_CRASH_REPORT
+} else:unix:!macx {
+  DEFINES	*= NO_CRASH_REPORT
+} else {
+  HEADERS	*= CrashReporter.h
+  SOURCES	*= CrashReporter.cpp
+}
+
+CONFIG(no-xinput2) {
+  DEFINES	*= NO_XINPUT2
+}
+
+CONFIG(no-bundled-speex) {
+  PKGCONFIG	*= speex speexdsp
+}
+
+!CONFIG(no-bundled-speex) {
+  INCLUDEPATH	*= ../../speex/include ../../speex/libspeex ../../speexbuild
+  LIBS 		*= -lspeex
+}
+
+CONFIG(sbcelt) {
+  SOURCES -= CELTCodec.cpp
+  SOURCES += CELTCodec_sbcelt.cpp
+  INCLUDEPATH *= ../../celt-0.7.0-src/libcelt ../../sbcelt-src
+  LIBS *= -lcelt -lsbcelt
+  DEFINES *= SBCELT_PREFIX_API SBCELT_COMPAT_API USE_SBCELT
+} else {
+  unix:!CONFIG(bundled-celt):system(pkg-config --atleast-version=0.7.0 celt) {
+    CONFIG	*= no-bundled-celt
+  }
+  CONFIG(no-bundled-celt) {
+    INCLUDEPATH	*= /usr/include/celt
+  }
+  !CONFIG(no-bundled-celt) {
+    INCLUDEPATH	*= ../../celt-0.7.0-src/libcelt
+  }
+}
+
+!win32 {
+  QMAKE_CXXFLAGS	*= -Wall -Wextra
+}
+
+!win32:!macx:!CONFIG(no-dbus) {
+  CONFIG		*= dbus
+}
+
+!CONFIG(no-g15) {
+  CONFIG *= g15
+}
+
+!CONFIG(no-bonjour) {
+  CONFIG *= bonjour
+}
+
+CONFIG(no-vorbis-recording) {
+  DEFINES *= NO_VORBIS_RECORDING
+}
+
+unix:!CONFIG(bundled-opus):system(pkg-config --exists opus) {
+  PKGCONFIG *= opus
+  DEFINES *= USE_OPUS
+} else {
+  !CONFIG(no-opus) {
+    CONFIG *= opus
+  }
+
+  CONFIG(opus) {
+    INCLUDEPATH *= ../../opus-src/celt ../../opus-src/include ../../opus-src/src ../../opus-build/src
+    DEFINES *= USE_OPUS
+    LIBS *= -lopus
+  }
+}
+
+win32 {
+  RC_FILE	= mumble.rc
+  HEADERS	*= GlobalShortcut_win.h TaskList.h
+  SOURCES	*= GlobalShortcut_win.cpp TextToSpeech_win.cpp Overlay_win.cpp SharedMemory_win.cpp Log_win.cpp os_win.cpp TaskList.cpp ../../overlay/HardHook.cpp ../../overlay/ods.cpp
+  LIBS		*= -l"$$(DXSDK_DIR)Lib/x86/dxguid" -l"$$(DXSDK_DIR)Lib/x86/dinput8" -lsapi -lole32 -lws2_32 -ladvapi32 -lwintrust -ldbghelp -llibsndfile-1 -lshell32 -lshlwapi -luser32 -lgdi32 -lpsapi
+  LIBS		*= -ldelayimp -delayload:speex.dll -delayload:shell32.dll
+
+  DEFINES	*= WIN32
+  !CONFIG(no-asio) {
+    CONFIG	*= asio
+  }
+  !CONFIG(no-directsound) {
+    CONFIG	*= directsound
+  }
+  !CONFIG(no-wasapi) {
+    CONFIG	*= wasapi
+  }
+
+  !CONFIG(no-xboxinput) {
+    CONFIG *= xboxinput
+  }
+  CONFIG(xboxinput) {
+    HEADERS *= XboxInput.h
+    SOURCES *= XboxInput.cpp
+    DEFINES *= USE_XBOXINPUT
+  }
+
+  # XInputCheck (3rdparty/xinputheck-src)
+  INCLUDEPATH *= ../../3rdparty/xinputcheck-src
+  LIBS *= -lxinputcheck
+
+  !CONFIG(no-elevation) {
+    CONFIG(release, debug|release) {
+      QMAKE_LFLAGS *= /MANIFESTUAC:\"level=\'asInvoker\' uiAccess=\'true\'\"
+    }
+  }
+  QMAKE_POST_LINK = $$QMAKE_POST_LINK$$escape_expand(\\n\\t)$$quote(mt.exe -nologo -updateresource:$(DESTDIR_TARGET);1 -manifest mumble.appcompat.manifest)
+}
+
+unix {
+  HAVE_PULSEAUDIO=$$system(pkg-config --modversion --silence-errors libpulse)
+  HAVE_PORTAUDIO=$$system(pkg-config --modversion --silence-errors portaudio-2.0)
+
+  !isEmpty(HAVE_PORTAUDIO):!CONFIG(no-portaudio) {
+    CONFIG *= portaudio
+  }
+
+  !isEmpty(HAVE_PULSEAUDIO):!CONFIG(no-pulseaudio) {
+    CONFIG -= portaudio
+    CONFIG *= pulseaudio
+  }
+
+  !CONFIG(no-bundled-speex) {
+    QMAKE_CFLAGS *= -I../../speex/include -I../../speexbuild
+    QMAKE_CXXFLAGS *= -I../../speex/include -I../../speexbuild
+    QMAKE_CXXFLAGS_RELEASE *= -I../../speex/include -I../../speexbuild
+    QMAKE_CXXFLAGS_DEBUG *= -I../../speex/include -I../../speexbuild
+  }
+
+  CONFIG *= link_pkgconfig
+
+  PKGCONFIG *= openssl sndfile
+
+  macx {
+    TARGET = Mumble
+    ICON = ../../icons/mumble.icns
+    QMAKE_INFO_PLIST = mumble.plist
+    QMAKE_PKGINFO_TYPEINFO = MBLE
+
+    LIBS += -framework Security -framework SecurityInterface -framework ApplicationServices
+
+    HEADERS *= GlobalShortcut_macx.h ConfigDialogDelegate.h
+    SOURCES *= SharedMemory_unix.cpp
+    OBJECTIVE_SOURCES *= TextToSpeech_macx.mm GlobalShortcut_macx.mm os_macx.mm Log_macx.mm
+
+    !CONFIG(no-cocoa) {
+        # Link against libxar so we can inspect Mac OS X installer packages.
+        CONFIG(static) {
+          LIBS += -lxml2 -lbz2 -lxar
+        } else {
+          LIBS += -lxar
+        }
+        LIBS += -framework ScriptingBridge
+
+        # Native feeling config dialog.
+        OBJECTIVE_SOURCES += ConfigDialog_macx.mm ConfigDialogDelegate.mm Overlay_macx.mm
+        HEADERS += ConfigDialog_macx.h
+    } else {
+        SOURCES += Overlay_unix.cpp
+    }
+
+    # CoreAudio
+    LIBS += -framework CoreAudio -framework AudioUnit -framework AudioToolbox
+    SOURCES += CoreAudio.cpp
+    HEADERS += CoreAudio.h
+  } else {
+    HEADERS *= GlobalShortcut_unix.h
+    SOURCES *= GlobalShortcut_unix.cpp TextToSpeech_unix.cpp Overlay_unix.cpp SharedMemory_unix.cpp Log_unix.cpp
+    PKGCONFIG *= x11
+    LIBS *= -lrt -lXi
+
+    !CONFIG(no-oss) {
+      CONFIG  *= oss
+    }
+
+    !CONFIG(no-alsa):contains(UNAME, Linux) {
+      CONFIG *= alsa
+    }
+
+    !CONFIG(no-speechd) {
+      CONFIG *= speechd
+    }
+  }
+}
+
+alsa {
+	DEFINES *= USE_ALSA
+	PKGCONFIG *= alsa
+	HEADERS *= ALSAAudio.h
+	SOURCES *= ALSAAudio.cpp
+}
+
+oss {
+	DEFINES *= USE_OSS
+	HEADERS *= OSS.h
+	SOURCES *= OSS.cpp
+	INCLUDEPATH *= /usr/lib/oss/include
+}
+
+pulseaudio {
+	DEFINES *= USE_PULSEAUDIO
+	PKGCONFIG *= libpulse
+	HEADERS *= PulseAudio.h
+	SOURCES *= PulseAudio.cpp
+}
+
+portaudio {
+	DEFINES *= USE_PORTAUDIO
+	PKGCONFIG *= portaudio-2.0
+	HEADERS *= PAAudio.h
+	SOURCES *= PAAudio.cpp
+}
+
+asio {
+	DEFINES *= USE_ASIO
+	HEADERS *= ASIOInput.h
+	SOURCES	*= ASIOInput.cpp
+	FORMS *= ASIOInput.ui
+	INCLUDEPATH *= "$$ASIO_PATH/common" "$$ASIO_PATH/host" "$$ASIO_PATH/host/pc"
+}
+
+bonjour {
+	DEFINES *= USE_BONJOUR
+
+	HEADERS *= ../bonjour/BonjourRecord.h ../bonjour/BonjourServiceResolver.h ../bonjour/BonjourServiceBrowser.h BonjourClient.h
+	SOURCES *= ../bonjour/BonjourServiceResolver.cpp ../bonjour/BonjourServiceBrowser.cpp BonjourClient.cpp
+	win32 {
+		INCLUDEPATH *= "$$BONJOUR_PATH/include"
+		QMAKE_LIBDIR *= "$$BONJOUR_PATH/lib/win32"
+		LIBS *= -lDNSSD
+	}
+	unix:!macx {
+		system(pkg-config --exists avahi-compat-libdns_sd avahi-client) {
+			PKGCONFIG *= avahi-compat-libdns_sd avahi-client
+		} else {
+			LIBS *= -ldns_sd
+		}
+	}
+}
+
+dbus {
+	DEFINES *= USE_DBUS
+	CONFIG *= qdbus
+	HEADERS *= DBus.h
+	SOURCES *= DBus.cpp
+}
+
+speechd {
+	DEFINES *= USE_SPEECHD
+	LIBS *= -lspeechd
+}
+
+directsound {
+	DEFINES *= USE_DIRECTSOUND
+	HEADERS	*= DirectSound.h
+	SOURCES	*= DirectSound.cpp
+	LIBS	*= -ldsound
+}
+
+wasapi {
+	DEFINES *= USE_WASAPI
+	HEADERS	*= WASAPI.h WASAPINotificationClient.h
+	SOURCES	*= WASAPI.cpp WASAPINotificationClient.cpp
+	LIBS	*= -lAVRT -delayload:AVRT.DLL
+}
+
+g15 {
+	DEFINES *= USE_G15
+	unix:!macx {
+		SOURCES *= G15LCDEngine_unix.cpp
+		HEADERS *= G15LCDEngine_unix.h
+		LIBS *= -lg15daemon_client
+	} else {
+		SOURCES *= G15LCDEngine_helper.cpp
+		HEADERS *= G15LCDEngine_helper.h ../../g15helper/g15helper.h
+	}
+}
+
+CONFIG(no-update) {
+	DEFINES *= NO_UPDATE_CHECK
+}
+
+!CONFIG(no-embed-qt-translations) {
+	# Add additional 3rd party Qt translations not shipped with Qt
+	TRANSLATIONS *= qttranslations/qt_it.ts qttranslations/qt_tr.ts
+	DEFINES *= USING_BUNDLED_QT_TRANSLATIONS
+
+	# Add translations shipped with Qt
+	QT_TRANSDIR = $$[QT_INSTALL_TRANSLATIONS]/
+	QT_TRANSDIR = $$replace(QT_TRANSDIR,/,$${DIR_SEPARATOR})
+
+	QT_TRANSDIR = $$[QT_INSTALL_TRANSLATIONS]/
+	QT_TRANSDIR = $$replace(QT_TRANSDIR,/,$${DIR_SEPARATOR})
+
+	QT_TRANSLATION_FILES_SRC *= qt_cs.qm qt_da.qm qt_de.qm qt_es.qm qt_fr.qm qt_ja.qm qt_pl.qm qt_pt.qm qt_ru.qm qt_sv.qm qt_zh_CN.qm qt_zh_TW.qm
+	for(lang, QT_TRANSLATION_FILES_SRC):exists($$[QT_INSTALL_TRANSLATIONS]/$${lang}) {
+		QT_TRANSLATION_FILES *= $${lang}
+	}
+
+	copytrans.output = ${QMAKE_FILE_NAME}
+	copytrans.commands = $$QMAKE_COPY $${QT_TRANSDIR}${QMAKE_FILE_NAME} ${QMAKE_FILE_OUT}
+	copytrans.input = QT_TRANSLATION_FILES
+	copytrans.CONFIG *= no_link
+	copytrans.variable_out = rcc.depends
+
+	QMAKE_EXTRA_COMPILERS *= copytrans
+
+	RESOURCES *= mumble_qt.qrc
+}
+
+!CONFIG(no-embed-tango-icons) {
+	RESOURCES *= mumble_tango.qrc
+}
+
+CONFIG(static) {
+  DEFINES *= USE_STATIC
+
+  # Keep in sync with main.cpp QT_IMPORT_PLUGIN list.
+  QTPLUGIN += qtaccessiblewidgets qico qsvg qsvgicon
+  macx {
+    QTPLUGIN += qicnsicon
+  }
+
+  # Icon engines are special; they don't get their lib directory
+  # included automatically by mkspecs/features/qt.prf
+  LIBS *= -L$$[QT_INSTALL_PLUGINS]/iconengines
+}
+
+lrel.output = ${QMAKE_FILE_BASE}.qm
+lrel.commands = $${QMAKE_LRELEASE} ${QMAKE_FILE_NAME}
+lrel.input = TRANSLATIONS
+lrel.CONFIG *= no_link
+lrel.variable_out = rcc.depends
+
+QMAKE_EXTRA_COMPILERS *= lrel
+
+include(../../symbols.pri)
